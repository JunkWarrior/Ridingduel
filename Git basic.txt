初始化GIT仓库
1.选择某个目录作为git仓库
2.cd到当前目录下
D:\Git>cd learngit
3.使用git init将当前目录创建为一个git仓库,会自动生成.git目录
D:\Git\learngit>git init
Initialized empty Git repository in D:/Git/learngit/.git/


添加文件到GIT仓库
1.将某个文件(readme.txt)放入git仓库目录下(或者子目录)
2.用git add命令告诉Git,将文件添加到仓库
D:\Git\learngit>git add readme.txt
3.用git commit命令告诉Git,将文件提交到仓库
D:\Git\learngit>git commit -m "wrote a readme file"
[master (root-commit) 22ea34e] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt


随时掌控仓库当前状态
git status命令
D:\Git\learngit>git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   readme.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        Git init&add.txt

no changes added to commit (use "git add" and/or "git commit -a")


查看上次未上传的改动
git diff命令
D:\Git\learngit>git diff
diff --git a/readme.txt b/readme.txt
index 0b823c9..b4bc5e3 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,2 +1,2 @@
-Git is a version control system.
+Git is a distributed version control system.^M
 Git is free softwre.


显示最近一段时间的提交
git log命令(会显示最近的三次提交)
D:\Git\learngit>git log
commit 662696d0480f3d5b6133cb3805164a1fee02085c
Author: Peter Petrelli <18817368006@126.com>
Date:   Thu May 25 14:47:35 2017 +0800

    append GPL

commit 2e52673dcaac4e4b56bd7dd52acf648685642df5
Author: Peter Petrelli <18817368006@126.com>
Date:   Thu May 25 14:32:10 2017 +0800

    add word distributed

commit 22ea34ecad7147aae27c2aacc8c25b3c58824448
Author: Peter Petrelli <18817368006@126.com>
Date:   Thu May 25 14:15:01 2017 +0800

    wrote a readme file

增加参数 --pretty=oneline，就会只看到commit id和description
D:\Git\learngit>git log --pretty=oneline
662696d0480f3d5b6133cb3805164a1fee02085c append GPL
2e52673dcaac4e4b56bd7dd52acf648685642df5 add word distributed
22ea34ecad7147aae27c2aacc8c25b3c58824448 wrote a readme file


版本回退
git reset --hard HEAD^
HEAD^=上一个版本=HEAD~1
HEAD^^=上上一个版本=HEAD~2
HEAD~100=往上100个版本
Windows CMD控制器中使用HEAD^会异常，由于无法识别^
zhouq@ZHOU-QUNJIAN MINGW64 /d/Git/learngit (master)
$ git reset --hard HEAD^
HEAD is now at 2e52673 add word distributed

此时版本已经回退至上一个版本(2e52673),此时若想恢复到被抛弃的新版本(662696d)
zhouq@ZHOU-QUNJIAN MINGW64 /d/Git/learngit (master)
$ git reset --hard 662696d0480f3d5b6133cb3805164a1fee02085c
HEAD is now at 662696d append GPL

若你已经忘记了新版本的commit id(662696d),可以通过git reflog来尝试找到上一次的commit id
zhouq@ZHOU-QUNJIAN MINGW64 /d/Git/learngit (master)
$ git reflog
662696d HEAD@{0}: reset: moving to 662696d0480f3d5b6133cb3805164a1fee02085c
2e52673 HEAD@{1}: reset: moving to HEAD^
662696d HEAD@{2}: commit: append GPL
2e52673 HEAD@{3}: commit: add word distributed
22ea34e HEAD@{4}: commit (initial): wrote a readme file

由于git实际上是用一个head指针控制版本，所以git允许我们在各版本之间使用git reset --hard commit_id进行穿梭


工作区和暂存区的概念
工作区(Working Directory)
类似于D:\Git\learngit

版本库(Repository)
类似于D:\Git\learngit\.git
其中有个最重要的东西,成为stage或index的暂存区

把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把工作区的文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。


管理修改
对于同一个文件，进行如下操作：
第一次修改 -> git add -> 第二次修改 -> git commit
此时，只会commit第一次修改，第二次修改不会被提交。
也就是说git commit只负责暂存区的修改，不会直接管理工作区的文件。

若想提交第二次修改，可如下操作：
第一次修改 -> git add -> 第二次修改 -> git add -> git commit


撤销修改
对于未被git add的文件，使用如下方法可以撤销修改：
git checkout -- [filename]
对于已被git add进暂存区，但并没有被commit的文件，使用如下方法可以将暂存区的修改放回工作区：
git reset HEAD [filename]


删除文件
从版本库中删除文件:
git rm [filename]
git commit -m "..."
如果删错了，需要复原，同样使用：
git checkout -- [filename]
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

