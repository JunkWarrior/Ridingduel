远程仓库
将一个现有的本地仓库与远程仓库作关联:
git remote add origin git@server-name:path/repo-name.git
git remote add origin [远程仓库url](example:git@github.com:JunkWarrior/Ridingduel.git)

如果创建远程仓库时，生成了一个README.md文件，需要先将远程仓库的内容整合到本地仓库中
git pull --rebase origin master

然后将本地库的所有内容推送到远程库上:
git push -u origin master

实质上是把当前分支master推送到远程origin
-u参数，意味着推送的同时，关联了本地master和远程master

之后本地的修改，推送到GitHub，都可以使用
git push origin master


本地没有仓库，从远程仓库克隆
git clone git@server-name:path/repo-name.git

默认的git://使用ssh，亦可使用https等其他协议，如https://github.com/JunkWarrior/Ridingduel.git
https有两大缺点，速度慢且每次推送必须输入口令


分支管理
git使用HEAD指针指向分支指针的方式，实现分支功能，master是主指针。
通常情况，HEAD指针指向master主指针。

创建分支
git checkout -b [branch_name]
-b参数代表创建并切换，相当于两条指令:
git branch [branch_name]
git checkout [branch_name]

列出所有分支
git branch
当前分支前会有一个*

分支切换
git checkout [branch_name]

在新的分支[branch_name]上的修改，不会直接合并到master上，直到执行了以下指令：
git checkout master
git merge [branch_name]
此时master指针就指向了原先[branch_name]指向的提交点。

在完成了合并之后，可以将不需要的分支删除
git branch -d [branch_name]


冲突
例如:
master上有一个readme.txt,最后的内容是Creating a new branch is quick & simple.
feature1上也有一个readme.txt,最后的内容是Creating a new branch is quick AND simple.

此时merge，会出现冲突
$ git merge feature1
Auto-merging readme.txt
CONFLICT (content): Merge conflict in readme.txt
Automatic merge failed; fix conflicts and then commit the result.

readme.txt最后的内容，也会变成：
<<<<<<< HEAD
Creating a new branch is quick & simple.
=======
Creating a new branch is quick AND simple.
>>>>>>> feature1

此时必须我们手动去解决冲突，即选择一个为最终版本，git add并git commit即可。

git log --graph可以看到分支合并图。
git log --graph --pretty=oneline --abbrev-commit


分支管理策略
通常情况下merge都会是在Fast forward模式下，只是这样merge后，并删除分支，之前的分支信息就无法在git log中呈现。
如果在merge时，强制禁用掉Fast forward模式，即使用--no-ff参数，merge后会有一个新的commit包含之前的分支信息。
git merge --no-ff -m "[description]" [branch_name]

通常来说
master分支应该是非常稳定的，仅用来发布新版本；
dev分支是用来发布测试版本的，当测试完成后，合并到master上；
其余分支是平时用来干活的，时不时可以合并到dev分支上测试。


Bug分支
软件开发中，bug就像家常便饭一样。
有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。

例如：
当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，当前正在dev上进行的工作还没有提交。
但实际上你的工作尚未完成，可能预计还要一天的工作时间，但是bug要求必须在两小时内修复。怎么办？
此时可以使用git stash功能将现场保存起来，等待以后继续工作。
zhouq@ZHOU-QUNJIAN MINGW64 /d/Git/learngit (master)
$ git stash
Saved working directory and index state WIP on master: d7b27b5 merge with no-ff
HEAD is now at d7b27b5 merge with no-ff

这样之后，master的status就恢复到了最近的那个commit。
然后就可以创建分支issue-101来修复bug。
修复完成，合并分支并删除分支后，就需要恢复现场了，步骤如下：
1. 先用git stash list 查看当时保存的工作现场
2. 有以下三种指令可以使用
恢复某一现场：
git stash apply stash@{position}(若没有则默认stash@{0})
删去某一现场:
git stash drop stash@{position}(若没有则默认stash@{0})
恢复并删去最近的现场:
git stash pop


Feature分支
软件开发中，总有无穷无尽的新的功能要不断添加进来。

添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了。
因此，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
Feature分支的使用和Bug分支类似。
例如:
git checkout -b feature-Junk
...
git status
git commit -m "..."
git checkout dev

如果一切正常，后续就是合并并删除feature-Junk分支
如果出现意外，feature-Junk分支不再需要合并，需要被强行删除，则使用：
git checkout -D feature-Junk
即用于丢弃一个没有被合并过的分支


多人协作
查看远程库名称:
git remote
查看远程库的抓取&推送地址:
git remote -v

多人协作的通常工作模式
1.首先，可以试图用git push origin branch-name推送自己的修改；
2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
3.如果合并有冲突，则解决冲突，并在本地提交；
4.没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。


标签管理
发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。
将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。
所以，标签也是版本库的一个快照。
Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。



